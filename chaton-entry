#!/usr/bin/env gosh
;; Entrance of the room.   Obtains a new client id from the comet daemon
;; and provide the "outer frame" of the chat room.

(add-load-path "@@server-data-dir@@")

(define-module chaton.entry
  (use www.cgi)
  (use rfc.http)
  (use rfc.cookie)
  (use text.html-lite)
  (use text.tree)
  (use file.util)
  (use srfi-1)
  (use util.list)
  (use chaton)
  (use chaton.mobile)
  (export entry-main dispatch-pre-main))
(select-module chaton.entry)

(define-constant +chaton-url+ "http://practical-scheme.net/chaton/")
(define-constant +viewer+  "@@comet-url-prefix@@/")
(define-constant +credential+ "@@server-data-dir@@auth")

(define (dispatch-pre-main args)
  (if (not @@use-chaton-mobile@@)
    (entry-main args)
    (or
      ;; check parameter "mode"
      (and-let* ((_ (equal? "GET" (cgi-get-metavariable "REQUEST_METHOD")))
                 (params (cgi-parse-parameters))
                 ;; "/path/to/entry?c=m&mode=chaton"
                 (_ (equal? "m" (cgi-get-parameter "c" params)))
                 (mode (cgi-get-parameter "mode" params))
                 (new-cookies (construct-cookie-string
                                `(("chaton-mode"
                                   ,(if (equal? mode "mobile")
                                      "mobile"
                                      "chaton")
                                   ,@(make-cookie-args)))))
                 )
        (cgi-main
          (lambda (_)
            (cgi-header
              :cookies new-cookies
              :location +room-url+
              :pragma "no-cache"
              :cache-control "no-cache"))))
      ;; check cookie "chaton-mode"
      (and-let* ((cookies (cgi-parse-parameters :query-string ""
                                                :merge-cookies #t))
                 (chaton-mode (cgi-get-parameter "chaton-mode" cookies)))
        (if (equal? "mobile" chaton-mode)
          (mobile-main args)
          (entry-main args)))
      ;; fallback
      (if @@chaton-mobile-as-default@@
        (mobile-main args)
        (entry-main args)))))


(define (entry-main args)
  (set! (port-buffering (current-error-port)) :line)
  (cgi-main (lambda (_) (emit-content (get-cid)))))

(define (get-cid)
  (and-let* ([ (file-exists? +credential+) ]
             [cred (file->string +credential+)])
    (rxmatch-let (#/\/\/([^\/]+)\// +viewer+) (_ host)
      (receive (status hdrs body) (http-get host #`"/getcid?cred=,cred")
        (and (equal? status "200")
             (guard (e [(<read-error> e) #f])
               (let1 p (read-from-string body)
                 (and-let* ([ (list? p) ]
                            [ (every pair? p) ]
                            [x (assq 'cid p)])
                   (cdr x)))))))))

(define (emit-content cid)
  (if cid
    `(,(cgi-header :content-type "text/html; charset=utf-8"
                   :pragma "no-cache"
                   :cache-control "no-cache"
                   )
      ,(the-page cid))
    `(,(cgi-header :status "503"
                   :content-type "text/html; charset=utf-8"
                   :pragma "no-cache"
                   :cache-control "no-cache"
                   )
      ,(the-503 cid))))

(define (the-503 cid)
  (html:html
   (html:head
    (html:title "Chaton " (html-escape-string @@room-name/escd@@))
    (html:link :href "@@httpd-url@@@@url-path@@chaton.css" :rel "Stylesheet"
               :type "text/css")
    (html:link :href "@@httpd-url@@@@url-path@@var/index.rdf" :rel "Alternate" :type "application/rss+xml")
    (html:script :src "@@prototype-url@@" :type "text/javascript")
    (html:script :src "@@httpd-url@@@@url-path@@@@chaton-js@@"
                 :type "text/javascript"))
   (html:body :id "the-body"
    (html:h1 "Service Temporarily Unavailable")
    (if @@use-chaton-mobile@@
      (html:a :href "@@httpd-url@@@@url-path@@?c=m&mode=mobile"
              "Mobile mode")
      '()))))

(define (the-page cid)
  (html:html
   (html:head
    (html:title "Chaton " (html-escape-string @@room-name/escd@@))
    (html:link :href "@@httpd-url@@@@url-path@@chaton.css" :rel "Stylesheet"
               :type "text/css")
    (html:link :href "@@httpd-url@@@@url-path@@var/index.rdf" :rel "Alternate" :type "application/rss+xml")
    (html:script :src "@@prototype-url@@" :type "text/javascript")
    (html:script :src "@@httpd-url@@@@url-path@@@@chaton-js@@"
                 :type "text/javascript"))
   (html:body :id "the-body" :onload #`"initMainBody('@@comet-url-prefix@@/?c=,|cid|');"
    ;; Right pane -------------
    (html:div :id "right-pane"
      ;; Title ------------------
      (html:h1 :id "room-title"
       (html:img :class "room-icon" :src "@@icon-url@@" :align "absmiddle" :alt "")
       (html:br)
       (html-escape-string @@room-name/escd@@))
     (html:div :class "room-description"
               (html-escape-string @@room-description/escd@@))
     (html:div :class "room-description" @@room-html/escd@@)
     (html:div :class "chaton-logo"
      "Built on "(html:a :href +chaton-url+ "Chaton"))
     )
    ;; Left pane --------------
    (html:div :id "left-pane"
     (make-navigation-html :mobile-mode? #f)
     (html:div :id "view-frame-container"
      (html:iframe :src "about:blank"
                   :id "view-frame"))
     (html:form :onsubmit "post(); return false;" :id "post-form"
      (html:table
       (html:tr
        (html:td "Nickname:")
        (html:td
         (html:input :type "text" :name "nick" :id "post-nick")
         (html:input :type "checkbox" :name "remember" :id "post-remember")
         (html:label :for "post-remember" "Remember me")))
       (html:tr
        (html:td "Text:")
        (html:td
         (html:textarea :name "text" :id "post-text" :rows "3" :cols "40"))
        (html:td :valign "bottom"
         (html:input :type "submit" :name "submit" :id "post-submit"
                     :value "chat"))))))
    )))

;;;===================================================================

(select-module user)
(import chaton.entry)
(define main dispatch-pre-main)

;; Local variables:
;; mode: scheme
;; end:
;; vim: set ft=scheme:

