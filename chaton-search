#!/usr/bin/env gosh

(add-load-path "@@server-data-dir@@")

(define-module chaton.search
  (use www.cgi)
  (use rfc.http)
  (use text.html-lite)
  (use text.tree)
  (use file.util)
  (use srfi-1)
  (use gauche.charconv)
  (use srfi-19)
  (use chaton)
  (export search-main))
(select-module chaton.search)

(define *number-of-searchbox* 3)
(define *max-rows-of-result* 100)

(define (search-main args)
  (set! (port-buffering (current-error-port)) :line)
  (cgi-main (lambda (params) (emit-content params))
            :on-error
            (and +show-stack-trace+
                 (lambda (e)
                   `(,(cgi-header)
                     ,(html:pre
                       (html-escape-string
                        (call-with-output-string
                          (cut with-error-to-port <> (cut report-error e)))))))))
  0)

(define (emit-content params)
  (let* ((mode (cgi-get-parameter "m" params :default "entry"))
         (queries (get-queries params))
         (results (if (equal? mode "day")
                    (queries->day-results queries)
                    (queries->entry-results queries))))
    (list
      (cgi-header :content-type "text/html; charset=utf-8"
                  :pragma "no-cache"
                  :cache-control "no-cache"
                  )
      (the-page mode queries results))))

(define (get-queries params)
  ;; TODO: :defaultは#fにして、#fの場合はquery-stringを全部連結したものを採用
  ;;       すべき。空文字列の時の対応もちゃんと書く事
  (let* ((_mb (cgi-get-parameter "_mb" params :default "日本語"))
         (params-encoding (ces-guess-from-string _mb "*JP")))
    (define (_mb-converter str)
      (ces-convert str params-encoding))
    (filter
      (lambda (str)
        (not (string=? str "")))
      (cgi-get-parameter "q" params
                         :list #t
                         :convert _mb-converter))))

(define (queries->regexps queries)
  (map
    (lambda (query)
      (string->regexp (regexp-quote query)))
    queries))


(define (get-reversed-all-files)
  (reverse
    (sort
      (directory-fold
        +datadir+
        (lambda (path seed)
          (if (#/\d\d\d\d\/\d\d\/\d\d\.dat$/ path)
            (cons path seed)
            seed))
        '()))))

(define (get-reversed-all-lines-from-file file)
  (let* ((symlink? (file-is-symlink? file))
         (locker (if symlink?
                   chaton-with-shared-locking
                   (lambda (thunk) (thunk))))
         (r (map read-from-string (locker (cut file->string-list file)))))
    (reverse
      (if (not symlink?)
        r
        (let* ((today (current-date))
               (y (date-year today))
               (m (date-month today))
               (d (date-day today))
               )
          (let next ((left r))
            (if (null? left)
              '()
              (receive (nick sec usec text ip) (decompose-entry (car left))
                (let* ((date (time-utc->date (make <time> :second sec)))
                       (y2 (date-year date))
                       (m2 (date-month date))
                       (d2 (date-day date))
                       )
                  (if (and (= y y2) (= m m2) (= d d2))
                    left
                    (next (cdr left))))))))))))

(define (queries->day-results queries)
  ;; queries->entry-results と似ているが、返されるのはdateオブジェクトのlist。
  ;; TODO: queries->entry-resultsと共通化できる部分を共通化する
  ;; TODO: dateオブジェクトだけじゃなく、マッチした部分の要約っぽい文字列も
  ;;       一緒につけたい……が、めんどそうなので、今はやめとく
  ;;       (やるとしたら、各queryにマッチしたentryを、
  ;;        queryの個数だけ返すとか？)
  (define (entry->text entry)
    (receive (nick sec usec text ip) (decompose-entry entry)
      text))
  (define (file->date file)
    (let1 m (#/(\d\d\d\d)\/(\d\d)\/(\d\d)\.dat$/ file)
      (make-date 0 0 0 0
                 (x->number (m 3)) ; day
                 (x->number (m 2)) ; month
                 (x->number (m 1)) ; year
                 0)))

  (let ((regexps (queries->regexps queries))
        )
    ;; ファイル単位でループ検索する
    (let next-file ((files (get-reversed-all-files))
                    (result '()))
      (cond
        ;; 全ファイルをチェックした
        ((null? files) result)
        ;; 結果が最大数+1に達した
        ;; (超過チェックを行う為に、+1した結果を返す必要がある)
        ((< *max-rows-of-result* (length result)) result)
        (else
          (let* ((all-lines (get-reversed-all-lines-from-file (car files)))
                 (all-text (string-join
                             (map
                               entry->text
                               all-lines)
                             "\n"))
                 (matched? (every
                             (lambda (re)
                               (re all-text))
                             regexps)))
            (next-file
              (cdr files)
              (if matched?
                (cons (file->date (car files)) result)
                result))))))))

(define (queries->entry-results queries)
  ;; 以下のような構造体を複数個、listとして返す
  ;; '(リンク構築用情報 . ヒットした行データそのもののS式表現)
  ;; 元ファイルの構造は以下の通り
  ;; '("名前" (epoch usec) "本文" "111.222.33.44")
  ;; これはchaton.scmで使用されている内部形式なので、decompose-entryで分解可能
  (let ((regexps (queries->regexps queries))
        )
    (define (match-queries? entry)
      (receive (nick sec usec text ip) (decompose-entry entry)
        (every
          (lambda (re)
            (re text))
          regexps)))

    ;; ファイル単位でループ検索する
    (let next-file ((files (get-reversed-all-files))
                    (result '()))
      (if (null? files)
        result
        (let1 all-lines (get-reversed-all-lines-from-file (car files))
          ;; 行単位でループ検索する
          (let next-line ((lines all-lines)
                          (result2 result))
            (cond
              ;; 結果が最大数+1に達した
              ;; (超過チェックを行う為に、+1した結果を返す必要がある)
              ((< *max-rows-of-result* (length result2)) result2)
              ;; 全行検索した。次のファイルへ
              ((null? lines) (next-file (cdr files) result2))
              ;; この行を検査し、次の行へ
              (else
                (next-line (cdr lines)
                           (if (match-queries? (car lines))
                             (cons (car lines) result2)
                             result2))))))))))

(define *msg:usage*
  "入力欄に検索したい単語を入力してください(AND検索です)。")
(define *msg:not-found*
  "一件もみつかりませんでした")
(define *msg:over-max-rows*
  (list
    "検索結果が"
    *max-rows-of-result*
    "件を越えている為、全ての検索結果を表示できません。"
    (html:br)
    "もう少し検索条件を絞り込んでみてください。"))

;; TODO: expand-entry-results と共用できる部分を共用化する
(define (expand-day-results queries results)
  (cond
    ((null? queries) *msg:usage*)
    ((null? results) *msg:not-found*)
    (else
      (let* (
             (over-rows? (< *max-rows-of-result* (length results)))
             (results-formed (reverse (if over-rows? (cdr results) results)))
             )
        (list
          (if over-rows?  (html:p (html:strong *msg:over-max-rows*)) '())
          (html:ol
            (map
              (lambda (date)
                (let ([y (date-year date)]
                      [m (date-month date)]
                      [d (date-day date)]
                      )
                  (html:li
                    (html:a
                      :href (format "~a/~4,'0d/~2,'0d/~2,'0d"
                                    +archive-url+ y m d)
                      (html-escape-string 
                        (format "~4,'0d/~2,'0d/~2,'0d" y m d))))))
              results-formed))
          (html:hr)
          (html:p "done."))))))

(define (expand-entry-results queries results)
  (cond
    ((null? queries) *msg:usage*)
    ((null? results) *msg:not-found*)
    (else
      (let* ((regexps (queries->regexps queries))
             (re-true (string->regexp
                        (tree->string
                          (list
                            "("
                            (string-join
                              (map regexp->string regexps)
                              ")|(")
                            ")"))))
             (over-rows? (< *max-rows-of-result* (length results)))
             (results-formed (reverse (if over-rows? (cdr results) results)))
             )
        (list
          (if over-rows?  (html:p (html:strong *msg:over-max-rows*)) '())
          (html:ol
            (map
              (lambda (result)
                (receive (nick sec usec text ip) (decompose-entry result)
                  ;; TODO: この部分はchaton.scmを使って共通化したい
                  (define (render-text str)
                    (html:a ;:class "permalink-anchor"
                            :href (make-permalink
                                    sec (make-anchor-string sec usec))
                            ;; TODO: re-trueを使って、色付け等をしたい
                            (html-escape-string str)))
                  (html:li
                    (html:div
                      :class "entry-header"
                      (html:span :class "timestamp"
                                 (sys-strftime "%Y/%m/%d %T %Z" (sys-localtime sec)))
                      (html:span :class "chatter" nick))
                    (if (#/\n/ text)
                      (html:pre :class "entry-multi"
                                (render-text text))
                      (html:div :class "entry-single"
                                (html:span (render-text text)))))))
              results-formed))
          (html:hr)
          (html:p "done."))))))

(define (fill-html-src html-src . keywords)
  (regexp-replace-all
    #/\#\#([\-\w]+?)\#\#/
    html-src
    (lambda (m)
      (let1 key (make-keyword (m 1))
        (get-keyword key keywords (m))))))

(define (the-page mode queries results)
  (let ()
    (define (make-radio-selector-of-mode value)
      (let1 id (string-append "mode_" value)
        (list
          (html:input
            :type "radio"
            :name "m"
            :id id
            :value value
            :checked (if (equal? mode value) "checked" #f))
          (html:label
            :for id
            "search by " value))))

    (html:html
      (html:head
        (html:title "Chaton "
                    (html-escape-string @@room-name/escd@@)
                    " &gt; Search")
        (html:link :href "@@httpd-url@@@@url-path@@chaton.css" :rel "Stylesheet"
                   :type "text/css")
        (html:script :src "@@prototype-url@@" :type "text/javascript"))
      (html:body
        :id "the-body"
        ;; Right pane -------------
        (html:div
          :id "right-pane"
          ;; Title ------------------
          (html:h1 :id "room-title"
                   (html:img :class "room-icon" :src "@@icon-url@@"
                             :align "absmiddle" :alt "")
                   (html:br)
                   (html-escape-string @@room-name/escd@@))
          ;(html:div :class "room-description"
          ;          (html-escape-string @@room-description/escd@@))
          (html:div
            (html:p :class "search-navigate"
                    (html:a :href "@@httpd-url@@@@url-path@@"
                            "Return to the chat room"))
            (html:p :class "search-navigate"
                    (html:a :href "@@httpd-url@@@@url-path@@a/today"
                            "Read archives")))
          )
        ;; Left pane --------------
        (html:div
          :id "left-pane"
          (html:div
            :class "search-box"
            (html:form
              :action "@@httpd-url@@@@url-path@@s"
              :method "post"
              :id "search-form"
              (html:input :type "hidden" :name "_mb" :value "日本語")
              (html:div "search words :")
              (html:ul
                (map
                  (lambda (index)
                    (let1 val (list-ref queries index "")
                      (html:li
                        (html:input
                          :type "text"
                          :name "q"
                          :size "50"
                          :value val))))
                  (iota *number-of-searchbox*)))
              (html:div
                (make-radio-selector-of-mode "entry")
                (html:br)
                (make-radio-selector-of-mode "day")
                )
              (html:div
                (html:input
                  :type "submit"
                  ;:name "search"
                  :id "search-button"
                  :value "search"))))
          (html:div
            (if (equal? mode "day")
              (expand-day-results queries results)
              (expand-entry-results queries results)))
          )
        ))))

;;;===================================================================

(select-module user)
(import chaton.search)
(define main search-main)

;; Local variables:
;; mode: scheme
;; end:
;; vim:set ft=scheme:
