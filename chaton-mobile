#!/usr/bin/env gosh

(add-load-path "@@server-data-dir@@")

(define-module chaton.mobile
  (use www.cgi)
  (use rfc.http)
  (use text.html-lite)
  (use text.tree)
  (use file.util)
  (use srfi-1)
  (use srfi-13)
  (use rfc.uri)
  (use rfc.cookie)
  (use chaton)
  (require "./chaton-poster-@@room-name@@")
  (export mobile-main))
(select-module chaton.mobile)

(define-constant +chaton-url+ "http://practical-scheme.net/chaton/")
(define-constant +credential+ "@@server-data-dir@@auth")

(define (mobile-main args)
  (set! (port-buffering (current-error-port)) :line)
  (cgi-main
    (lambda (params-orig)
      (emit-content (charconv-cgi-param params-orig)))
    :on-error (and
                +show-stack-trace+
                (lambda (e)
                  `(,(cgi-header)
                    ,(html:pre
                      (html-escape-string
                       (call-with-output-string
                         (cut with-error-to-port <> (cut report-error e)))))))))
  0)


(define (emit-content params)
  ;; ディスパッチ
  ;; 必要最低限、必要な分岐は以下の通り
  ;; - 入力欄＋名前欄＋最近のログ
  ;; - submit
  ;; - 履歴(PCと共用でok？)
  (let1 c (make-keyword (cgi-get-parameter "c" params :default ""))
    (case c
      ((:submit) (emit-content-submit params))
      ;((:log) (emit-content-log params))
      ;((:mode) (emit-content-mode params))
      (else (emit-content-form params)))))

(define (encode-js str)
  (with-string-io
    str
    (lambda ()
      (let loop ()
        (let1 c (read-char)
          (unless (eof-object? c)
            (let1 c-num (char->ucs c)
              (cond
                ((< c-num 256)
                 (display (uri-encode-string (string c))))
                ((< c-num 65536)
                 (format #t "%u~4,'0x" c-num))
                (else
                 (format #t "%U~8,'0x" c-num))))
            (loop)))))))

(define (decode-js str)
  ;; ( http://www.openspc2.org/JavaScript/escape/index.html のUTF-8の項目)
  (regexp-replace-all
    #/\%((?:[0-9a-fA-F]{2})|(?:u[0-9a-fA-F]{4})|(?:U[0-9a-fA-F]{8}))/
    str
    (lambda (m)
      (let* ((match-str (m 1))
             (head-char (string-ref match-str 0)))
        ;; (m 1) => "12" or "u1234" or "U12345678"
        (cond
          [(char=? #\u head-char)
           (read-from-string (string-append "\"" "\\" match-str "\""))]
          [(char=? #\U head-char)
           (read-from-string
             (string-append "\"" "\\" (string-downcase match-str) "\""))]
          [else
            (read-from-string (string-append "\"" "\\x" match-str "\""))])))))

(define (get-nick-from-cookie)
  ;; Cookie: chaton-nickname=%u5C71%u7530%u592A%u90CE
  (and-let* ((cookie-params (cgi-parse-parameters :query-string ""
                                                  :merge-cookies #t))
             (nick-src (cgi-get-parameter "chaton-nickname"
                                          cookie-params
                                          :default #f))
             (nick (decode-js nick-src))
             )
    nick))

(define (emit-content-form params)
  (let* ((nick-from-cookie (get-nick-from-cookie))
         (remember-me (not (not nick-from-cookie)))
         (nick (or
                 (cgi-get-parameter "nick" params :default #f)
                 nick-from-cookie
                 ""))
         )
    (list
      (cgi-header :content-type "text/html; charset=utf-8"
                  :pragma "no-cache"
                  :cache-control "no-cache"
                  )
      (html:html
        (html:head
          (html:title "Chaton " (html-escape-string @@room-name/escd@@))
          (html:link :href "@@httpd-url@@@@url-path@@chaton.css" :rel "Stylesheet"
                     :type "text/css")
          (html:link :href "@@httpd-url@@@@url-path@@var/index.rdf" :rel "Alternate" :type "application/rss+xml")
          ;(html:script :src "@@prototype-url@@" :type "text/javascript")
          ;(html:script :src "@@httpd-url@@@@url-path@@@@chaton-js@@"
          ;             :type "text/javascript")
          )
        (html:body :id "the-body"
                   (the-form nick remember-me)
                   (html:hr)
                   (the-recentlog)
                   (the-footer)
                   )))))

(define (the-form nick remember-me)
  (html:form
    :action "@@httpd-url@@@@url-path@@m"
    :method "post"
    :target "_self"
    :name "send"
    (html:div
      (html:input :type "hidden" :name "c" :value "submit")
      (html:input :type "hidden" :name "_mb" :value "日本語")
      (html:input :type "text" :name "text"
                  :id "post-text" :value ""
                  :size "48"
                  ;:style "width:50%"
                  )
      (html:input :type "submit" ;:name "submit"
                  :id "post-submit" :value "chat / update")
      (html:small (sys-strftime "(%T)" (get-systime (sys-gettimeofday))))
      )
    (html:script
      "<!--\n"
      "self.document.send.text.focus();\n"
      "// -->"
      )
    (html:div
      "Nickname:"
      (html:input :type "text" :name "nick" :id "post-nick" :value nick)
      (html:input :type "checkbox" :name "remember" :id "post-remember"
                  :value "1"
                  :checked (if remember-me "checked" #f))
      (html:label :for "post-remember" "Remember me")
      )
    ;(make-navigation-html :mobile-mode? #t)
    ))

(define (the-recentlog)
  (let1 counter 0
    (define (renderer entry last-state)
      (inc! counter)
      (if (< (or @@chaton-mobile-rows@@ 5) counter)
        (values '() last-state)
        (receive (nick sec usec text ip) (decompose-entry entry)
          (values `(,(if (and (equal? nick (state-chatter last-state))
                              (equal? ip (state-ip last-state))
                              (< (abs (- (state-timestamp last-state) sec)) 
                                 (get-timestamp-omit-interval)))
                       '()
                       (html:div
                        :class "entry-header"
                        (html:span :class "chatter" (html-escape-string nick))
                        " "
                        (html:small
                          (sys-strftime "(%H:%M)" (get-systime sec)))))
                    ,(html-format-entry text #f #t))
                  (make-state nick ip sec)))))

    (chaton-render-from-file
      +current-file+
      0
      #f
      :renderer renderer
      :newest-first #t
      )))

(define (the-footer)
  (list
    (html:hr)
    (make-navigation-html :mobile-mode? #t)
    (html:hr)
    (html:h1 :id "room-title"
             ;(html:img :class "room-icon" :src "@@icon-url@@" :align "absmiddle" :alt "")
             ;(html:br)
             (html-escape-string @@room-name/escd@@))
    ;(html:div :class "room-description"
    ;          (html-escape-string @@room-description/escd@@))
    (html:div :class "chaton-logo"
              "Built on "(html:a :href +chaton-url+ "Chaton"))
    ))

(define (emit-content-submit params)
  ;; 要求される動作:
  ;; - 以下でどのような操作がなされようと、基本的にはmにリダイレクトされる
  ;; - textが空文字列なら、ログ追記は行わない
  ;; - nickが空文字列なら、ログ追記は行わない？(適当な仮名を与えてもokかも)
  ;;   考えた結果、nickに適当な文字列を入れる事に
  ;; - text, nick, ip等が一つ前の発言と同じなら、ログ追記は行わない
  ;; -- race conditionが起こらないように完全にする必要まではない、大体でok
  ;; - リダイレクトについて
  ;; -- 後述のクッキーが発行される
  ;; -- remember-meが偽値の時のみ、nickに対応するパラメータがqueryに付与される
  ;; - クッキーについて
  ;; -- remember-meが真なら、名前クッキーを発行する
  ;; -- remember-meが偽なら、名前クッキーを消去する
  ;; -- 毎回、mode=mobileクッキーを発行する
  ;;    (これはchaton-browserからの戻りリンク等で使う)
  (let* ((text (cgi-get-parameter "text" params :default ""))
         (nick-src (cgi-get-parameter "nick" params :default ""))
         (nick (if (string=? "" nick-src)
                 (format "somebody(~a)" (cgi-get-metavariable "REMOTE_ADDR"))
                 nick-src))
         (remember-me (cgi-get-parameter "remember" params))
         (max-age-epoch (* 10 365 24 60 60))
         )
    (define (is-dup-entry?)
      ;; TODO: あとで実装する
      #f)
    (define (make-cookie-args max-age-epoch)
      `(
        :path "@@cookie-path@@"
        :max-age ,max-age-epoch
        :expires ,(if (zero? max-age-epoch)
                    0
                    (+ (sys-time) max-age-epoch))
        ))
    (when (and
            (string-length text) ; textが空文字列でない時のみ、ログ追記を行う
            (not (is-dup-entry?))) ; 二重書き込み簡易チェック
      (with-module chaton.poster
        (chaton-post nick text)))
    (let ((cookies (construct-cookie-string
                     ;; TODO: この段階のencode-jsだとnickが二重にencodeされるかもしれない、もしそうなら、自前でクッキーの構築をやらなくてはいけなくなる
                     `(("chaton-nickname" ,@(if remember-me
                                              (cons (encode-js nick) (make-cookie-args max-age-epoch))
                                              (cons "" (make-cookie-args 0))))
                       ("chaton-mode" "mobile" ,@(make-cookie-args max-age-epoch)))
                     0))
          (next-url (if remember-me
                      +mobile-url+
                      (format "~a?nick=~a"
                              +mobile-url+
                              (uri-encode-string nick)))))
      (cgi-header
        :cookies cookies
        :location next-url
        :pragma "no-cache"
        :cache-control "no-cache"))))

;;;===================================================================

(select-module user)
(import chaton.mobile)
(define main mobile-main)

;; Local variables:
;; mode: scheme
;; end:
;; vim: set ft=scheme:

