#!/usr/bin/env gosh

(add-load-path "@@server-data-dir@@")
;; for make check
(define-module chaton
  (define |@@extra-script-in-chaton/sexpr@@| #f))

(define-module chaton.poster
  (use www.cgi)
  (use srfi-13)
  (use file.util)
  (use util.list)
  (use text.html-lite)
  (use text.tree)
  (use gauche.parameter)
  (use chaton)
  (export poster-main))
(select-module chaton.poster)

(define *limit* 2048)
(define +sequence-old+ (build-path +docdir+ "var/seq"))

(define return-seq (make-parameter -1))

(define (poster-main args)
  (cgi-main (lambda (params)
              (parameterize ((return-seq -1))
                (let* ([nick (cgi-get-parameter "nick" params :default #f)]
                       [text (cgi-get-parameter "text" params :default #f)])
                  (chaton-post nick text)
                  (emit-reply))))
            :on-error
            (and +show-stack-trace+
                 (lambda (e)
                   `(,(cgi-header)
                     ,(html:pre
                       (html-escape-string
                        (call-with-output-string
                          (cut with-error-to-port <> (cut report-error e)))))))))
  0)

(define (chaton-post nick text)
  (make-directory* +datadir+) ;ensure
  (chaton-with-exclusive-locking
   (lambda ()
     (call-with-output-file +current-file+
       (cut update <>
            (string-trim-both nick) (string-trim-both text))
       :if-exists :append)
     (update-rss))))

(define (emit-reply) ; return var/seq
  (write-tree
    `(,(cgi-header :content-type "text/plain"
                   :pragma "no-cache"
                   :cache-control "no-cache")
      ,(x->string (return-seq)))))

(define (update out nick text)
  (unless (or (string-null? nick) (string-null? text))
    (append-entry out nick text)
    (increment-sequence)
    (record-last-post-timestamp)))

(define (append-entry out nick text)
  (port-seek out 0 SEEK_END)
  (write (make-entry nick text) out)
  (newline out))

(define (make-entry nick text)
  (let1 s (string-incomplete->complete text #\?)
    (receive (sec usec) (sys-gettimeofday)
      `(,nick (,sec ,usec)
              ,(if (> (string-length s) *limit*) (string-take s *limit*) s)
              ,(cgi-get-metavariable "REMOTE_ADDR")))))

(define (increment-sequence)
  ;; NB: for the backward compatibility, we store the sequence number under
  ;; $DOCDIR (old location) as well as $(DATADIR).  Don't forget to drop
  ;; the old stuff after some time.
  (let1 cnt (x->integer (or (file->string +sequence-file+ :if-does-not-exist #f)
                            (file->string +sequence-old+ :if-does-not-exist #f)))
    (make-directory* (sys-dirname +sequence-file+))
    (with-output-to-file +sequence-file+ (cut write (+ cnt 1)) :atomic #t)
    (make-directory* (sys-dirname +sequence-old+))
    (with-output-to-file +sequence-old+ (cut write (+ cnt 1)) :atomic #t)
    (return-seq (+ cnt 1))
    ))

(define (record-last-post-timestamp)
  ;; NB: Theoretically the value written may differ from the entry's timestamp,
  ;; but we don't need precision here.
  (with-output-to-file +last-post-file+ (cut write (sys-time)) :atomic #t))

(define (update-rss)
  (with-output-to-file +index.rdf+
    (lambda ()
      (let ((title `("<title>" ,(html-escape-string "@@room-name@@") "</title>\n"))
            (link `("<link>" ,(html-escape-string "@@httpd-url@@@@url-path@@") "</link>\n"))
            )
        (write-tree
         `("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
           "<rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">\n"
           "<channel>\n"
           ,@title
           ,@link
           "<description>" ,(html-escape-string "@@room-description@@") "</description>\n"
           ,(chaton-render-from-file +current-file+ 0 #f
                                     :renderer chaton-render-rss-1
                                     :newest-first #t)
           "<image>\n"
           "<url>" ,(html-escape-string "@@icon-url@@") "</url>\n"
           ,@title
           ,@link
           "</image>\n"
           "</channel>\n"
           "</rss>\n"))))
    :atomic #t))

;;;===================================================================
(select-module user)

(import chaton.poster)
(define main poster-main)

;; Local variables:
;; mode: scheme
;; end:
